{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["State","hasCoord","pState","xy","find","c","AppWrapper","styled","div","hasAllWinningStates","allWinningStates","stateMap","reduce","s","undefined","App","useState","Initial","currentState","setCurrentState","setAllWinningStates","size","setSize","xState","setXState","oState","setOState","useEffect","XsTurn","OsTurn","allPositions","GameOver","alert","Math","pow","length","getButton","x","y","hasX","hasO","disabled","className","onClick","onSubmit","e","preventDefault","num","FormData","currentTarget","get","sizeInput","Number","isNaN","n","winningRows","winningColumns","winningDiags","currentRow","splice","currentColumn","generateWinningStates","type","name","grid","generateGrid","map","row","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4d84b46.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nenum State {\n  Initial,\n  XsTurn,\n  OsTurn,\n  GameOver,\n}\n\ntype Coord = [number, number];\ntype PlayerState = Coord[];\ntype WinningStates = PlayerState[];\n\n/*\n\nx | 0 | 1 | 2 | 3\n-----------------\n0 |\n-----------------\n1 |\n-----------------\n2 |\n-----------------\n3 |\n\nwinningRows:\n  [\n    [[0, 0], [0, 1], [0, 2]],\n    [[1, 0], [1, 1], [1, 2]],\n    ...\n  ]\nwinningColumns:\n  [\n    [[0, 0], [1, 0], [2,0]],\n    [[0, 1], [1, 1], [2,1]],\n    ...\n  ]\nwinningDiag\n  [\n    [[0, 0], [1, 1], [2, 2]],\n    [[2, 0], [1, 1], [0, 2]],\n  ]\n*/\n\nconst generateWinningStates = (n: number) => {\n  let winningRows: WinningStates = [];\n  let winningColumns: WinningStates = [];\n  let winningDiags: WinningStates = [[], []];\n\n  for (let x = 0; x < n; x++) {\n    winningRows[x] = [];\n    winningColumns[x] = [];\n    winningDiags[0] = [...winningDiags[0], [x, x]];\n    winningDiags[1] = [...winningDiags[1], [n - 1 - x, x]];\n\n    for (let y = 0; y < n; y++) {\n      const currentRow = winningRows[x];\n      winningRows.splice(x, 1, [...currentRow, [x, y]]);\n\n      const currentColumn = winningColumns[x];\n      winningColumns.splice(x, 1, [...currentColumn, [y, x]]);\n    }\n  }\n\n  return [...winningRows, ...winningColumns, ...winningDiags];\n};\n\nconst hasCoord = (pState: PlayerState, xy: Coord) => {\n  return !!pState.find((c) => c[0] === xy[0] && c[1] === xy[1]);\n};\n\nconst AppWrapper = styled.div`\n  * {\n    box-sizing: border-box;\n  }\n\n  .row {\n    display: flex;\n    align-items: center;\n  }\n\n  .xo-button {\n    height: 30px;\n    width: 30px;\n    text-align: center;\n  }\n`;\n\nconst hasAllWinningStates = (\n  allWinningStates: WinningStates,\n  pState: PlayerState\n) => {\n  const stateMap = pState.reduce((stateMap: any, xy: Coord) => {\n    stateMap[`${xy[0]},${xy[1]}`] = true;\n    return stateMap;\n  }, {});\n\n  return !!allWinningStates.find((s: PlayerState) => {\n    return !s.find((xy: Coord) => stateMap[`${xy[0]},${xy[1]}`] === undefined);\n  });\n};\n\nfunction App() {\n  const [currentState, setCurrentState] = useState<State>(State.Initial);\n  const [allWinningStates, setAllWinningStates] = useState<WinningStates>([]);\n  const [size, setSize] = useState(0);\n  const [xState, setXState] = useState<PlayerState>([]);\n  const [oState, setOState] = useState<PlayerState>([]);\n\n  useEffect(() => {\n    if (currentState === State.XsTurn || currentState === State.OsTurn) {\n      const allPositions = [...xState, ...oState]\n      if (hasAllWinningStates(allWinningStates, xState)) {\n        setCurrentState(State.GameOver);\n        alert(\"X won\");\n      } else if (hasAllWinningStates(allWinningStates, oState)) {\n        setCurrentState(State.GameOver);\n        alert(\"O won\");\n      } else if (Math.pow(size, 2) === allPositions.length) {\n        setCurrentState(State.GameOver);\n        alert(\"Draw\");\n      }\n    }\n  }, [currentState, allWinningStates, xState, oState, size]);\n\n  const startGame = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const num = formData.get(\"size\");\n\n    if (typeof num !== \"string\") return;\n\n    const sizeInput = Number(num);\n\n    if (isNaN(sizeInput) || sizeInput < 1) return;\n\n    setCurrentState(State.XsTurn);\n    setAllWinningStates(generateWinningStates(sizeInput));\n    setSize(sizeInput);\n  };\n\n  const getButton = (x: number, y: number) => {\n    const hasX = hasCoord(xState, [x, y]);\n    const hasO = hasCoord(oState, [x, y]);\n    const disabled = currentState === State.GameOver || hasX || hasO;\n    const handleClick = () => {\n      if (currentState === State.XsTurn && !hasX) {\n        setXState((s) => [...s, [x, y]]);\n        setCurrentState(State.OsTurn);\n      } else {\n        setOState((s) => [...s, [x, y]]);\n        setCurrentState(State.XsTurn);\n      }\n    };\n\n    return (\n      <button\n        className=\"xo-button\"\n        key={`${x}${y}`}\n        disabled={disabled}\n        onClick={handleClick}\n      >\n        {hasX ? \"X\" : hasO ? \"O\" : \"\"}\n      </button>\n    );\n  };\n\n  const generateGrid = () => {\n    let grid = [];\n\n    for (let x = 0; x < size; x++) {\n      grid[x] = [];\n\n      for (let y = 0; y < size; y++) {\n        grid[x] = [...grid[x], getButton(x, y)];\n      }\n    }\n\n    return grid;\n  };\n\n  const getStatus = () => {\n    if (currentState === State.Initial) {\n      return \"Enter any number more than 0\";\n    }\n\n    if (currentState === State.XsTurn) {\n      return \"X plays\";\n    }\n    if (currentState === State.OsTurn) {\n      return \"O plays\";\n    }\n\n    return \"Game Over\";\n  };\n\n  const startOver = () => {\n    setOState([]);\n    setXState([]);\n    setCurrentState(State.Initial);\n  };\n\n  return (\n    <AppWrapper>\n      <header className=\"App-header\">\n        <h1>Tic tac Toe</h1>\n      </header>\n\n      {currentState === State.Initial ? (\n        <form onSubmit={startGame}>\n          <input type=\"number\" name=\"size\" />\n          <button>Start</button>\n        </form>\n      ) : (\n        generateGrid().map((row, i) => (\n          <div className=\"row\" key={i}>\n            {row}\n          </div>\n        ))\n      )}\n      <p>{getStatus()}</p>\n      {currentState === State.GameOver && (\n        <div>\n          <button onClick={startOver}>Start over</button>\n        </div>\n      )}\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}